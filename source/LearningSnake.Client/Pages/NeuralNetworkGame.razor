@page "/neural-network-snake-game";

<PageTitle>Neural network game</PageTitle>
<GameBoard SnakeGame="_snakeGame" />

@code {
    private System.Timers.Timer _timer = new System.Timers.Timer(100);
    private SnakeGame? _snakeGame;
    private GameSimulator _gameSimulator = new GameSimulator(neuralNetworkConfiguration, geneticAlgorithmConfiguration, gameConfiguration);
    private SnakeSpecimen? _bestSnake;

    private static NeuralNetworkConfiguration neuralNetworkConfiguration = new NeuralNetworkConfiguration
        {
            HiddenLayersActivacionFunction = ActivactionFunction.Relu,
            OutputLayerActivactionFunction = ActivactionFunction.Sigmoid,
            HiddenNeuronLayers = 2,
            NeuronsPerHiddenLayer = 16,
            InputNodes = 24,
            OutputNodes = 4
        };

    private static GeneticAlgorithmConfiguration geneticAlgorithmConfiguration = new GeneticAlgorithmConfiguration
        {
            PopulationSize = 100,
            MutationRate = 0.01,
            ParentPercentage = 0.05,
            PreservedParents = 0.5
        };

    private static GameConfiguration gameConfiguration = new GameConfiguration
        {
            BoardHeight = 10,
            BoardWidth = 10,
            SnakeStartingMoves = 100,
            SnakeMovesGainedAfterEatingFood = 100,
            SnakeMaxMoves = 500,
            StartingSnakeLength = 5,
            SnakeLenghtAdditionAfterEatingFood = 1,
            BinaryVision = false
        };

    protected override Task OnInitializedAsync()
    {
        _gameSimulator = new GameSimulator(neuralNetworkConfiguration, geneticAlgorithmConfiguration, gameConfiguration);
        SimulatePopulationAndPickBestSnake();

        _timer.Elapsed += MakeAMove;
        _timer.AutoReset = true;
        _timer.Enabled = true;

        return base.OnInitializedAsync();
    }

    private void SimulatePopulationAndPickBestSnake()
    {
        var seed = Guid.NewGuid().GetHashCode();

        _gameSimulator.SimulateGameForEntirePopulation(seed);
        _bestSnake = _gameSimulator.GetBestSnakeOfCurrentPopulation();

        _snakeGame = new SnakeGame(gameConfiguration.BoardHeight, gameConfiguration.BoardWidth, gameConfiguration.StartingSnakeLength, seed);
        _snakeGame.InitializeGame();
    }

    private void MakeAMove(Object? source, System.Timers.ElapsedEventArgs e)
    {
        if (_snakeGame != null && _bestSnake != null && _snakeGame.State == GameState.InProgress)
        {
            _gameSimulator.MakeMove(_snakeGame, _bestSnake);
        }
        else
        {
            _timer!.Stop();
            SimulatePopulationAndPickBestSnake();
            _timer.Start();
        }

        this.StateHasChanged();
    }
}
